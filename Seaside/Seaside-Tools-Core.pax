| package |
package := Package name: 'Seaside-Tools-Core'.
package paxVersion: 1;
	basicComment: ''.

package classNames
	add: #WAAdmin;
	yourself.

package methodNames
	add: 'WAServerAdaptor class' -> #default;
	add: 'WAServerAdaptor class' -> #start;
	add: 'WAServerAdaptor class' -> #startOn:;
	add: 'WAServerAdaptor class' -> #stop;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\..\Grease\Grease-Core'
	'Seaside-Core'
	'Seaside-RenderLoop'
	'Seaside-Session').

package!

"Class Definitions"!

WAObject subclass: #WAAdmin
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: 'configuredApplicationDefaults configuredExceptionHandlingDefaults'!

"Loose Methods"!

!WAServerAdaptor class methodsFor!

default	"Helper method that returns a single adaptor of this class from the default WAServerManager.	If there are no adaptors of this class registered, return nil. If there are multiple adaptors	of this type, signal an error."		| adaptors |	adaptors := WAAdmin serverAdaptors select: [ :each | each isKindOf: self ].	(adaptors size > 1) ifTrue: [ self error: 'You cannot use this convenience method when more than one adaptor of the same type are registered. Use WAServerManager or a graphical interface when dealing with multiple adaptors of the same type.' ].	^ adaptors isEmpty		ifTrue: [ nil ]		ifFalse: [ adaptors first ]!

start	"Convenience method to start a single already registered adaptor of the type of the	receiver."	self default start!

startOn: portInteger	"Convenience method to start a single adaptor on the specified port. If an existing	adaptor of this type is already registered, it will be restarted on the specified port."	| adaptor |	adaptor := self default.	adaptor isNil		ifFalse: [ adaptor stop; port: portInteger ]		ifTrue: [ adaptor := self port: portInteger ].	adaptor start!

stop	"Convenience method to stop a currently running adaptor of the type of the receiver	as long as there is only one such adaptor currently registered."	| default |	default := self default.	default isNil ifFalse: [ default stop ]! !

!WAServerAdaptor class categoriesForMethods!
default!*seaside/tools/core!public! !
start!*seaside/tools/core!public! !
startOn:!*seaside/tools/core!public! !
stop!*seaside/tools/core!public! !
!

"End of package definition"!

