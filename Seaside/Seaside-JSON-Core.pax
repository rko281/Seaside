| package |
package := Package name: 'Seaside-JSON-Core'.
package paxVersion: 1;
	basicComment: ''.

package classNames
	add: #WAJsonArrayBrush;
	add: #WAJsonBrush;
	add: #WAJsonCanvas;
	add: #WAJsonDocument;
	add: #WAJsonElementBrush;
	add: #WAJsonEncoder;
	add: #WAJsonKeyValueBrush;
	add: #WAJsonObjectBrush;
	add: #WAJsonParser;
	add: #WAJsonSyntaxError;
	add: #WAJsonValueBrush;
	yourself.

package methodNames
	add: #Boolean -> #jsonOn:;
	add: #Character -> #jsonOn:;
	add: #Collection -> #jsonOn:;
	add: #DateAndTime -> #jsonOn:;
	add: #Dictionary -> #jsonOn:;
	add: #Float -> #jsonOn:;
	add: #GRDelegatingStream -> #json:;
	add: #GRPlatform -> #jsonEncoderOn:;
	add: #GRSmallDictionary -> #jsonOn:;
	add: #GRSmallDictionary2 -> #jsonOn:;
	add: #GRSmallOrderedSet -> #jsonOn:;
	add: #Integer -> #jsonOn:;
	add: #Object -> #asJson;
	add: #Object -> #jsonKeyOn:;
	add: #Object -> #jsonOn:;
	add: #ScaledDecimal -> #jsonOn:;
	add: #Stream -> #json:;
	add: #String -> #jsonKeyOn:;
	add: #String -> #jsonOn:;
	add: #UndefinedObject -> #jsonOn:;
	add: #WAUrl -> #jsonOn:;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\..\Core\Object Arts\Dolphin\Base\Dolphin'
	'..\..\Grease\Grease-Core'
	'Seaside-Canvas'
	'Seaside-Core').

package!

"Class Definitions"!

WAError subclass: #WAJsonSyntaxError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

WAObject subclass: #WAJsonParser
	instanceVariableNames: 'stream'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

WABrush subclass: #WAJsonBrush
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

WAJsonBrush subclass: #WAJsonArrayBrush
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

WAJsonBrush subclass: #WAJsonElementBrush
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

WAJsonBrush subclass: #WAJsonObjectBrush
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

WAJsonElementBrush subclass: #WAJsonKeyValueBrush
	instanceVariableNames: 'key'
	classVariableNames: 'StringKeysOnly'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

WAJsonElementBrush subclass: #WAJsonValueBrush
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

WADocument subclass: #WAJsonDocument
	instanceVariableNames: 'jsonEncoder'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

WATableBasedEncoder subclass: #WAJsonEncoder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

WACanvas subclass: #WAJsonCanvas
	instanceVariableNames: 'first'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Loose Methods"!

!Boolean methodsFor!

jsonOn: aRenderer	aRenderer boolean: self! !

!Boolean categoriesForMethods!
jsonOn:!*seaside/json/core!public! !
!

!Character methodsFor!

jsonOn: aRenderer	aRenderer string: (String with: self)! !

!Character categoriesForMethods!
jsonOn:!*seaside/json/core!public! !
!

!Collection methodsFor!

jsonOn: aRenderer 	aRenderer array: [		self do: [ :each |			aRenderer value: each ] ]! !

!Collection categoriesForMethods!
jsonOn:!*seaside/json/core!public! !
!

!DateAndTime methodsFor!

jsonOn: aRenderer	aRenderer dateAndTime: self! !

!DateAndTime categoriesForMethods!
jsonOn:!*seaside/json/core!public! !
!

!Dictionary methodsFor!

jsonOn: aRenderer	aRenderer object: [		self keysAndValuesDo: [ :key :value |			aRenderer key: key value: value ] ]! !

!Dictionary categoriesForMethods!
jsonOn:!*seaside/json/core!public! !
!

!Float methodsFor!

jsonOn: aRenderer	(self - self) = 0.0 "check for infinity, negative infinity and NaN"		ifTrue: [ aRenderer number: self ]		ifFalse: [ aRenderer null ]! !

!Float categoriesForMethods!
jsonOn:!*seaside/json/core!public! !
!

!GRDelegatingStream methodsFor!

json: anObject	| document context canvas |	document := WAJsonDocument on: self.	context := WARenderContext new		actionUrl: WAUrl new;		document: document;		yourself.	canvas := WAJsonCanvas context: context.	canvas render: anObject.	document close! !

!GRDelegatingStream categoriesForMethods!
json:!*seaside/json/core!public! !
!

!GRPlatform methodsFor!

jsonEncoderOn: aStream	"Answer an JSON encoder that works on aStream.	Platforms may provide optimized implementations."	^ WAJsonEncoder on: aStream! !

!GRPlatform categoriesForMethods!
jsonEncoderOn:!*seaside/json/core!public! !
!

!GRSmallDictionary methodsFor!

jsonOn: aRenderer	aRenderer object: [		self keysAndValuesDo: [ :key :value |			aRenderer key: key value: value ] ]! !

!GRSmallDictionary categoriesForMethods!
jsonOn:!*seaside/json/core!public! !
!

!GRSmallDictionary2 methodsFor!

jsonOn: aRenderer	aRenderer object: [		self keysAndValuesDo: [ :key :value |			aRenderer key: key value: value ] ]! !

!GRSmallDictionary2 categoriesForMethods!
jsonOn:!*seaside/json/core!public! !
!

!GRSmallOrderedSet methodsFor!

jsonOn: aRenderer	aRenderer array: [		self do: [ :each |			aRenderer value: each ] ]! !

!GRSmallOrderedSet categoriesForMethods!
jsonOn:!*seaside/json/core!public! !
!

!Integer methodsFor!

jsonOn: aRenderer	aRenderer number: self! !

!Integer categoriesForMethods!
jsonOn:!*seaside/json/core!public! !
!

!Object methodsFor!

asJson	^ WAJsonCanvas builder render: [ :json |		self jsonOn: json ]!

jsonKeyOn: aRenderer	self error: 'Only Strings can be used as keys in JSON objects.'!

jsonOn: aRenderer	self error: 'Override #jsonOn: to make the receiver serializeable as JSON'! !

!Object categoriesForMethods!
asJson!*seaside/json/core!public! !
jsonKeyOn:!*Seaside/JSON/Core!public! !
jsonOn:!*seaside/json/core!public! !
!

!ScaledDecimal methodsFor!

jsonOn: aRenderer	aRenderer scaledDecimal: self! !

!ScaledDecimal categoriesForMethods!
jsonOn:!*Seaside/JSON/Core!public! !
!

!Stream methodsFor!

json: anObject	| document context canvas |	document := WAJsonDocument on: self.	context := WARenderContext new		actionUrl: WAUrl new;		document: document;		yourself.	canvas := WAJsonCanvas context: context.	canvas render: anObject.	document close! !

!Stream categoriesForMethods!
json:!*seaside/json/core!public! !
!

!String methodsFor!

jsonKeyOn: aRenderer	self jsonOn: aRenderer!

jsonOn: aRenderer	aRenderer string: self! !

!String categoriesForMethods!
jsonKeyOn:!*seaside/json/core!public! !
jsonOn:!*seaside/json/core!public! !
!

!UndefinedObject methodsFor!

jsonOn: aRenderer	aRenderer null! !

!UndefinedObject categoriesForMethods!
jsonOn:!*seaside/json/core!public! !
!

!WAUrl methodsFor!

jsonOn: aRenderer	aRenderer string: self printString! !

!WAUrl categoriesForMethods!
jsonOn:!*seaside/json/core!public! !
!

"End of package definition"!

