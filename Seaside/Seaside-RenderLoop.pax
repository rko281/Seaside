| package |
package := Package name: 'Seaside-RenderLoop'.
package paxVersion: 1;
	basicComment: ''.

package classNames
	add: #WAActionPhaseContinuation;
	add: #WACallbackProcessingActionContinuation;
	add: #WACurrentCallbackProcessingActionContinuation;
	add: #WAFlushingRenderPhaseContinuation;
	add: #WAInitialRenderLoopContinuation;
	add: #WAMissingResponseError;
	add: #WAPluggableActionContinuation;
	add: #WARenderLoopConfiguration;
	add: #WARenderLoopContinuation;
	add: #WARenderPhaseContinuation;
	yourself.

package methodNames
	add: #WARequestContext -> #rootComponent:;
	add: #WARequestContext -> #rootComponentIfAbsent:;
	add: #WASession -> #presenter;
	add: #WASessionContinuation -> #isRenderLoopContinuation;
	add: 'WAHtmlCanvas class' -> #configureRenderContext:;
	add: 'WASessionContinuation class' -> #isRenderLoopContinuation;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\..\Core\Object Arts\Dolphin\Base\Dolphin'
	'..\..\Grease\Grease-Core'
	'Seaside-Canvas'
	'Seaside-Component'
	'Seaside-Core'
	'Seaside-Session').

package!

"Class Definitions"!

WAError subclass: #WAMissingResponseError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

WADynamicVariable subclass: #WACurrentCallbackProcessingActionContinuation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

WASystemConfiguration subclass: #WARenderLoopConfiguration
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

WASessionContinuation subclass: #WARenderLoopContinuation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

WARenderLoopContinuation subclass: #WAActionPhaseContinuation
	instanceVariableNames: 'renderContext'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

WARenderLoopContinuation subclass: #WARenderPhaseContinuation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

WAActionPhaseContinuation subclass: #WACallbackProcessingActionContinuation
	instanceVariableNames: 'jumpTo'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

WAActionPhaseContinuation subclass: #WAInitialRenderLoopContinuation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

WAActionPhaseContinuation subclass: #WAPluggableActionContinuation
	instanceVariableNames: 'action'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

WARenderPhaseContinuation subclass: #WAFlushingRenderPhaseContinuation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Loose Methods"!

!WAHtmlCanvas class methodsFor!

configureRenderContext: aWARenderContext	"We set aWARenderContext to use a rendering guide as visitor."			aWARenderContext visitor: (WARenderingGuide client: aWARenderContext visitor).! !

!WAHtmlCanvas class categoriesForMethods!
configureRenderContext:!*Seaside/RenderLoop!public! !
!

!WARequestContext methodsFor!

rootComponent: aComponent	"Set the root component for the render loop.	If this message is sent before a session is created the given component will be used as the root component of the render loop instead of the root component configured on the application."	self properties at: #rootComponent put: aComponent!

rootComponentIfAbsent: aNiladicBlock	"Answer the root component if set, the value of aNiladicBlock if not set."	^ self properties at: #rootComponent ifAbsent: aNiladicBlock! !

!WARequestContext categoriesForMethods!
rootComponent:!*seaside/renderloop!public! !
rootComponentIfAbsent:!*seaside/renderloop!public! !
!

!WASession methodsFor!

presenter	^ self properties at: #presenter ifAbsent: [ nil ]! !

!WASession categoriesForMethods!
presenter!*seaside/renderloop!public! !
!

!WASessionContinuation methodsFor!

isRenderLoopContinuation	^ self class isRenderLoopContinuation! !

!WASessionContinuation categoriesForMethods!
isRenderLoopContinuation!*seaside/renderloop!public! !
!

!WASessionContinuation class methodsFor!

isRenderLoopContinuation	^ false! !

!WASessionContinuation class categoriesForMethods!
isRenderLoopContinuation!*seaside/renderloop!public! !
!

"End of package definition"!

