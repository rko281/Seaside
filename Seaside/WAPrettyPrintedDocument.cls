"Filed out from Dolphin Smalltalk 7"!

WAHtmlDocument subclass: #WAPrettyPrintedDocument
	instanceVariableNames: 'html indentLevel indentCloseTags firstLine singleEncoder'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: 'knownEvents'!
WAPrettyPrintedDocument guid: (GUID fromString: '{23015166-113f-4145-b994-d2956caafa13}')!
WAPrettyPrintedDocument comment: 'This Document can be used in place of a WAHtmlDocument and will display a pretty version of the HTML source that would have been generated by the WAHtmlDocument.The technique here is that: - anything we are asked to output raw (i.e. #nextPut: and #nextPutAll:) we encode with entities - anything we are asked to entity encode (i.e. via #xmlEncoder) we double-encode, by wrapping the two WAXmlEncoders around each other - anything we want to output ourselves (i.e. prettiness) we do using a WAHtmlCanvas that we create ourselves'!
!WAPrettyPrintedDocument categoriesForClass!Seaside-Development-Core! !
!WAPrettyPrintedDocument methodsFor!

attribute: aKey with: aValue	aValue == false ifTrue: [ ^ self ].	html space.	html span		class: 'wa-attribute-key';		with: aKey.	aValue == true ifTrue: [ ^ self ].	self nextPut: $=.	html span		class: 'wa-attribute-value';		with: [			self nextPut: $".			(self knownRefs includes: aKey) 				ifTrue: [					html anchor						url: aValue greaseString;						with: [ self print: aValue ] ]				ifFalse: [					(self knownEvents includes: aKey) 						ifTrue: [							html anchor								onClick: aValue;								with: [ self print: aValue ] ]						ifFalse: [							aValue == true 								ifTrue: [ self nextPutAll: aKey ]								ifFalse: [ self print: aValue ] ] ].			self nextPut: $" ]!

attributes: anAttributes	anAttributes ifNil: [ ^ self ].	anAttributes keysAndValuesDo: [ :key :value |		self attribute: key with: value ]!

closeTag: aString	indentLevel := indentLevel - 1.	indentCloseTags removeLast		ifTrue: [ self indent ].	self nextPutAll: '</'.	html span 		class: 'wa-tag'; 		with: aString.	self nextPut: $>!

indent	firstLine		ifTrue: [ firstLine := false ]		ifFalse: [ html break ].	indentLevel timesRepeat: [ html space: 2 ].	html flush!

initializeWithContext: aRenderContext	self initializeWithStream: aRenderContext document stream codec: self requestContext codec.	xmlEncoder := GRPlatform current xmlEncoderOn: (singleEncoder := xmlEncoder). "we want double escapting to happen"	html := WAHtmlCanvas context: aRenderContext.	indentCloseTags := OrderedCollection with: false.	indentLevel := 0.	firstLine := true!

knownEvents	^ self class knownEvents!

knownRefs	^ #('action' 'cite' 'classid' 'codebase' 'data' 'href' 'longdesc' 'profile' 'src' 'usemap')!

nextPut: aCharacter	singleEncoder nextPut: aCharacter!

nextPutAll: aString	singleEncoder nextPutAll: aString!

openTag: aString attributes: anAttributes closed: aBoolean	self indent.	self nextPut: $<.	html span		class: 'wa-tag';		with: aString.	self attributes: anAttributes.	aBoolean ifTrue: [ self nextPut: $/ ].	self nextPut: $>.	aBoolean ifFalse: [ indentLevel := indentLevel + 1 ].	indentCloseTags removeLast; addLast: true; addLast: aBoolean! !
!WAPrettyPrintedDocument categoriesFor: #attribute:with:!private! !
!WAPrettyPrintedDocument categoriesFor: #attributes:!private! !
!WAPrettyPrintedDocument categoriesFor: #closeTag:!public!writing! !
!WAPrettyPrintedDocument categoriesFor: #indent!private! !
!WAPrettyPrintedDocument categoriesFor: #initializeWithContext:!initialization!public! !
!WAPrettyPrintedDocument categoriesFor: #knownEvents!configuration!public! !
!WAPrettyPrintedDocument categoriesFor: #knownRefs!configuration!public! !
!WAPrettyPrintedDocument categoriesFor: #nextPut:!public!writing! !
!WAPrettyPrintedDocument categoriesFor: #nextPutAll:!public!writing! !
!WAPrettyPrintedDocument categoriesFor: #openTag:attributes:closed:!public!writing! !

!WAPrettyPrintedDocument class methodsFor!

context: aRenderContext	^ self basicNew initializeWithContext: aRenderContext; yourself!

knownEvents	knownEvents isNil ifTrue: [ 		knownEvents := #('onabort' 'onauxiliaryclick' 'onblur' 'oncancel' 'onchange' 'onclick' 'onclose' 'oncontextmenu' 'oncopy' 'oncuechange' 'oncut' 'ondblclick' 'ondrag' 'ondragend' 'ondragenter' 'ondragexit' 'ondragleave' 'ondragover' 'ondragstart' 'ondrop' 'onerror' 'onfocus' 'oninput' 'oninvalid' 'onkeydown' 'onkeypress' 'onkeyup' 'onload' 'onmousedown' 'onmouseenter' 'onmouseleave' 'onmousemove' 'onmouseout' 'onmouseover' 'onmouseup' 'onpaste' 'onreset' 'onresize' 'onscroll' 'onsecuritypolicyviolation' 'onselect' 'onsubmit' 'ontoggle' 'onunload' 'onwheel') asSet ].	^ knownEvents!

on: aStream codec: aCodec	self error: 'Use #context:'! !
!WAPrettyPrintedDocument class categoriesFor: #context:!instance creation!public! !
!WAPrettyPrintedDocument class categoriesFor: #knownEvents!configuration!public! !
!WAPrettyPrintedDocument class categoriesFor: #on:codec:!instance creation!public! !

