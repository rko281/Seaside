| package |
package := Package name: 'Javascript-Dolphin-Core'.
package paxVersion: 1;
	basicComment: ''.

package basicPackageVersion: '9'.


package methodNames
	add: #Color -> #javascriptOn:;
	add: #Float -> #javascriptOn:;
	add: #GRCodecStream -> #javascript:;
	add: #UtfEncodedString -> #javascriptOn:;
	add: 'GRPackage class' -> #javascriptDolphinCore;
	add: 'JSStream class' -> #encodeUtfEncodedString:on:;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\..\Core\Object Arts\Dolphin\Base\Dolphin'
	'..\..\Core\Object Arts\Dolphin\MVP\Base\Dolphin MVP Base'
	'..\..\Grease\Grease-Core'
	'Javascript-Core').

package!

"Class Definitions"!


"Global Aliases"!


"Loose Methods"!

!Color methodsFor!

javascriptOn: aStream
	aStream
		nextPut: $";
		nextPutAll: self asHTMLColor;
		nextPut: $"! !
!Color categoriesFor: #javascriptOn:!public! !

!Float methodsFor!

javascriptOn: aStream

	"To satisfy:
		self assert: Float nan equals: 'NaN'.
		self assert: Float infinity equals: 'Infinity'.
		self assert: Float infinity * -1 equals: '-Infinity'"

	| classification |
	classification := self fpClass.
	(classification anyMask: FpClassNaN) ifTrue: [^aStream nextPutAll: 'NaN'].
	(classification anyMask: FpClassInfinite) ifTrue: [^aStream nextPutAll: ((classification anyMask: FpClassNegative) ifTrue: ['-Infinity'] ifFalse: ['Infinity'])].

	^self printOn: aStream! !
!Float categoriesFor: #javascriptOn:!printing!public! !

!GRCodecStream methodsFor!

javascript: anObject
	anObject javascriptOn: self! !
!GRCodecStream categoriesFor: #javascript:!*javascript-pharo-core!public! !

!GRPackage class methodsFor!

javascriptDolphinCore
	^(self new)
		name: 'Javascript-Dolphin-Core';
		addDependency: 'Javascript-Core';
		addDependency: 'Seaside-Dolphin-Core';
		url: #seasideUrl;
		yourself! !
!GRPackage class categoriesFor: #javascriptDolphinCore!*javascript-pharo-core!public! !

!JSStream class methodsFor!

encodeUtfEncodedString: aString on: aStream 	"Strings have a complicated encoding in Javascript, try to optimize their serialization."	
	| readStream |
		aStream nextPut: $".

	readStream := aString readStream.
	"Use a ReadStream to handle Dolphin's UtfEncodedString"	[readStream atEnd] whileFalse: 
		[| char value encoded |		char := readStream next.		value := char greaseInteger.		value < JavascriptCharacters size 			ifFalse: [				"U+2028 and U+2029 have to be treaded as new lines"				value = 16r2028 "Line separator"					ifTrue: [ aStream nextPutAll: '\u2028' ]					ifFalse: [						value = 16r2029 "Paragraph separator"							ifTrue: [ aStream nextPutAll: '\u2029' ]							ifFalse: [ aStream nextPut: char ] ] ]			ifTrue: [				encoded := JavascriptCharacters at: value + 1.				"we use nil markers becausee #isNil is faster than #isString because it's not				actually sent"				encoded isNil 					ifTrue: [ aStream nextPut: char ]					ifFalse: [ aStream nextPutAll: encoded ] ] ].	aStream nextPut: $"! !
!JSStream class categoriesFor: #encodeUtfEncodedString:on:!encoding!public! !

!UtfEncodedString methodsFor!

javascriptOn: aStream	JSStream encodeUtfEncodedString: self on: aStream! !
!UtfEncodedString categoriesFor: #javascriptOn:!*javascript/core!public! !

"End of package definition"!

